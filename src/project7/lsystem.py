#Luyi Xiao 
#Version 1
#CS5001 & CS5003
#L-system 

#Notes are mostly follow Professor Maxwell's words

import sys
#returns a blank L-system
def init():
    return [" ", []]

#returns the base string of L-system

def getBase(lsys):
    base = lsys[0]
    return base

#sets the base string
def setBase(lsys, base):
    lsys[0] = base


#adds a rule to the L-system
def addRule(lsys, rule):
    lsys[1].append(rule)

#returns a rule in the L-system
def getRule(lsys, index):
    rule = lsys[1][index]
    return rule

				

#Create an L-system list by reading in the specified file
def createLsystemFromFile( filename ):
    # assign to lsys the result of calling the function init()
    lsys=init()
    # assign to fp the result of opening the file (use open(filename, "r") )
    fp = open(filename, "r")
    # assign to lines the result of calling fp.readlines()
    lines = fp.readlines()
    # close the file using the close method of the file object held in fp
    fp.close()
    # for each line in the list lines

    for line in lines:
        line = line.strip()
        line = line.split(' ')
        if line[0] == "base":
            setBase(lsys, line[1])
        elif line[0] == 'rule':
            item_list = line[1:]
        
            addRule(lsys, item_list)

    return lsys

#Return a string generated by applying the L-system rules n times
def buildString( lsys, n ):
    nstring = getBase(lsys)
    rule = getRule(lsys, 0)
    symbol = rule[0]
    replacement = rule[1]
    i = 0
    while i < n:
        nstring = nstring.replace(symbol, replacement)
        i +=1
    
    return nstring

def main(argv):
    # check if there are enough command-line argument

    if len(argv) < 3:
        print("Usage : python3 lsystem.py <in_filename> <num_iterations>")
        exit()

    lsys_filename = argv[1]
    lsys = createLsystemFromFile( lsys_filename )
    print(lsys)
										 
    num_iter = int( argv[2] )
    s = buildString( lsys, num_iter )
    print(s)

if __name__ == "__main__":
    main(sys.argv)
			